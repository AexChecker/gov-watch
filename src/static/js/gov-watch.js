// Generated by IcedCoffeeScript 1.2.0i
(function() {
  var BOOK, SEARCHTERM, SLUG, all_books, all_subjects, all_tags, data_callback, do_search, generate_hash, generate_url, iced, initialized, load_data, loaded_data, onhashchange, process_data, search_term, select_item, selected_book, selected_slug, setup_searchbox, show_watermark, skip_overview, update_history, wm_shown, __iced_k,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = function() {};

  loaded_data = null;

  all_books = [];

  all_tags = [];

  all_subjects = [];

  selected_book = "";

  search_term = "";

  selected_slug = "";

  skip_overview = false;

  BOOK = 'b';

  SLUG = 's';

  SEARCHTERM = 't';

  generate_hash = function(selected_book, search_term, slug) {
    if (slug) {
      return "!z=" + BOOK + ":" + selected_book + "|" + SEARCHTERM + ":" + search_term + "|" + SLUG + ":" + slug;
    } else {
      return "!z=" + BOOK + ":" + selected_book + "|" + SEARCHTERM + ":" + search_term;
    }
  };

  generate_url = function(slug) {
    return "http://" + window.location.host + "/#" + (generate_hash("", "", "", slug));
  };

  update_history = function(slug) {
    var ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: 'gov-watch.iced',
        funcname: 'update_history'
      });
      setTimeout((__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return __iced_deferrals.ret = arguments[0];
          };
        })(),
        lineno: 33
      })), 0);
      __iced_deferrals._fulfill();
    })(function() {
      return window.location.hash = generate_hash(selected_book, search_term, slug);
    });
  };

  onhashchange = function() {
    var hash, key, part, slug, splits, value, _i, _len, _ref;
    hash = window.location.hash;
    hash = hash.slice(4, hash.length);
    splits = hash.split("|");
    slug = null;
    selected_book = null;
    search_term = "";
    for (_i = 0, _len = splits.length; _i < _len; _i++) {
      part = splits[_i];
      _ref = part.split(":"), key = _ref[0], value = _ref[1];
      if (key === BOOK) selected_book = value;
      if (key === SLUG) slug = value;
      if (key === SEARCHTERM) search_term = value;
    }
    if (!selected_book && !slug) {
      selected_book = all_books[0];
      update_history();
      return;
    }
    $("#books option[value='" + selected_book + "']").attr('selected', 'selected');
    if (search_term !== "") {
      show_watermark(false);
      $("#searchbox").val(search_term);
    }
    $(".item").removeClass("bigger");
    if (slug) {
      selected_slug = slug;
      $("body").addClass("detail-view");
      $("body").removeClass("list-view");
      select_item($(".item[rel=" + selected_slug + "]"));
      $(".item").removeClass("shown");
      $(".item[rel=" + selected_slug + "]").addClass("shown");
      $(".item[rel=" + selected_slug + "]").addClass("bigger");
      return $("#items").isotope({
        filter: ".shown"
      });
    } else {
      select_item(null);
      $("body").addClass("list-view");
      $("body").removeClass("detail-view");
      return do_search();
    }
  };

  wm_shown = false;

  show_watermark = function(show) {
    if (show) {
      $("#searchbox").val("חיפוש חופשי בתוך ההמלצות");
    } else {
      if (wm_shown) $("#searchbox").val("");
    }
    wm_shown = show;
    return $("#searchbox").toggleClass('watermark', show);
  };

  data_callback = function(data) {
    var rec, tag, _i, _j, _len, _len2, _ref;
    loaded_data = data;
    all_books = {};
    all_tags = {};
    all_subjects = {};
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      rec = data[_i];
      if (!all_books[rec.gov.book]) all_books[rec.gov.book] = {};
      all_books[rec.gov.book][rec.gov.chapter] = true;
      _ref = rec.gov.tags;
      for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
        tag = _ref[_j];
        all_tags[tag] = 1;
      }
      all_subjects[rec.gov.subject] = 1;
    }
    all_tags = Object.keys(all_tags);
    all_subjects = Object.keys(all_subjects);
    all_books = Object.keys(all_books);
    if (localStorage) {
      localStorage.data = JSON.stringify(data);
      localStorage.all_books = JSON.stringify(all_books);
      localStorage.all_tags = JSON.stringify(all_tags);
      localStorage.all_subjects = JSON.stringify(all_subjects);
    }
    return process_data();
  };

  initialized = false;

  setup_searchbox = function() {
    var source, subject, tag, _i, _j, _len, _len2;
    show_watermark(true);
    $("#searchbox").change(function() {
      if (wm_shown) {
        search_term = "";
      } else {
        search_term = $("#searchbox").val();
      }
      return update_history();
    });
    $("#searchbox").focus(function() {
      return show_watermark(false);
    });
    $("#searchbox").blur(function() {
      if ($(this).val() === "") return show_watermark(true);
    });
    $("#searchbar").submit(function() {
      return false;
    });
    source = [];
    for (_i = 0, _len = all_tags.length; _i < _len; _i++) {
      tag = all_tags[_i];
      source.push({
        type: "tag",
        title: tag
      });
    }
    for (_j = 0, _len2 = all_subjects.length; _j < _len2; _j++) {
      subject = all_subjects[_j];
      source.push({
        type: "subject",
        title: subject
      });
    }
    return $("#searchbox").typeahead({
      source: source,
      items: 20,
      matcher: function(item) {
        return ~item.title.indexOf(this.query);
      },
      valueof: function(item) {
        return item.title;
      },
      selected: function(val) {
        search_term = val;
        return update_history();
      },
      highlighter: function(item) {
        var highlighted_title;
        highlighted_title = item.title.replace(new RegExp('(' + this.query + ')', 'ig'), function($1, match) {
          return '<strong>' + match + '</strong>';
        });
        if (item.type === "subject") return highlighted_title;
        if (item.type === "tag") {
          return "<span class='searchtag'><a href='#'>" + highlighted_title + "</a></span>";
        }
      }
    });
  };

  process_data = function() {
    var book, do_list, html, list_template, modal_options, template, ___iced_passed_deferral, __iced_deferrals, _i, _len,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (initialized) return;
    initialized = true;
    $("#books").html("<option value=''>\u05d4\u05db\u05dc</option>");
    for (_i = 0, _len = all_books.length; _i < _len; _i++) {
      book = all_books[_i];
      $("#books").append("<option value='" + book + "'>" + book + "</option>");
    }
    template = $("script[name=item]").html();
    list_template = $("script[name=list]").html();
    do_list = function(text) {
      return Mustache.to_html(list_template, {
        items: text,
        linkify: function() {
          return function(text, render) {
            text = render(text);
            return text = text.replace(/\[(.+)\]/, "<a href='$1'>\u05e7\u05d9\u05e9\u05d5\u05e8</a>");
          };
        }
      });
    };
    html = Mustache.to_html(template, {
      items: loaded_data,
      none_val: function() {
        return function(text, render) {
          text = render(text);
          if (text === "") {
            return "\u05d0\u05d9\u05df";
          } else {
            return text;
          }
        };
      },
      semicolon_list: function() {
        return function(text, render) {
          text = render(text);
          text = text.split(';');
          return text = do_list(text);
        };
      },
      urlforslug: function() {
        return function(text, render) {
          text = render(text);
          return generate_url(text);
        };
      }
    });
    $("#items").html(html);
    $(".item").each(function() {
      var implementation_status, max_numeric_date, min_numeric_date, pad, timeline_items, today;
      implementation_status = $(this).attr('implementation-status');
      if (implementation_status === 'STUCK' || implementation_status === 'WORKAROUND') {
        $(this).find('.buxa-header').addClass('bad');
      }
      if (implementation_status === 'FIXED') {
        $(this).find('.buxa-header').addClass('good');
      }
      pad = function(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return n;
        }
      };
      today = new Date();
      today = "" + (today.getFullYear()) + "/" + (pad(today.getMonth())) + "/" + (pad(today.getDay()));
      $(this).find('.timeline .timeline-point:last').attr('data-duedate', today);
      timeline_items = $(this).find(".timeline .timeline-point");
      timeline_items.tsort({
        attr: 'data-duedate',
        order: 'asc'
      });
      timeline_items = $(this).find(".timeline .timeline-point");
      max_numeric_date = 0;
      min_numeric_date = 2100 * 372;
      timeline_items.each(function() {
        var d, date, day, month, numeric_date, year, _ref;
        date = $(this).attr('data-duedate');
        date = date.split('/');
        _ref = (function() {
          var _j, _len2, _results;
          _results = [];
          for (_j = 0, _len2 = date.length; _j < _len2; _j++) {
            d = date[_j];
            _results.push(parseInt(d));
          }
          return _results;
        })(), year = _ref[0], month = _ref[1], day = _ref[2];
        numeric_date = (year * 372) + ((month - 1) * 31) + (day - 1);
        if (numeric_date === NaN) numeric_date = 2012 * 372;
        if (numeric_date > max_numeric_date) max_numeric_date = numeric_date + 1;
        if (numeric_date < min_numeric_date) min_numeric_date = numeric_date;
        return $(this).attr('data-duedate-numeric', numeric_date);
      });
      return timeline_items.each(function() {
        var date, percent;
        date = parseInt($(this).attr('data-duedate-numeric'));
        percent = (date - min_numeric_date) / (max_numeric_date - min_numeric_date) * 75.0 + 10;
        return $(this).css("top", percent + "%");
      });
    });
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: 'gov-watch.iced',
        funcname: 'process_data'
      });
      setTimeout((__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return __iced_deferrals.ret = arguments[0];
          };
        })(),
        lineno: 283
      })), 50);
      __iced_deferrals._fulfill();
    })(function() {
      $.Isotope.prototype._positionAbs = function(x, y) {
        return {
          right: x,
          top: y
        };
      };
      $("#items").isotope({
        itemSelector: '.item',
        layoutMode: 'masonry',
        transformsEnabled: false,
        filter: ".shown",
        getSortData: {
          chapter: function(e) {
            return e.find('.chapter-text').text();
          },
          recommendation: function(e) {
            return e.find('.recommendation-text').text();
          },
          budget: function(e) {
            return -parseInt("0" + e.attr('cost'), 10);
          },
          comments: function(e) {
            return -parseInt("0" + e.find('.fb_comments_count').text(), 10);
          },
          oneitem: function(e) {
            if (e.attr("rel") === selected_slug) {
              return 0;
            } else {
              return 1;
            }
          }
        }
      });
      setup_searchbox();
      $("#books").change(function() {
        selected_book = $("#books").val();
        return update_history();
      });
      $("#sort").change(function() {
        var sort_measure;
        sort_measure = $("#sort").val();
        return $("#items").isotope({
          sortBy: sort_measure
        });
      });
      $(".item").click(function() {
        return update_history($(this).attr('rel'));
      });
      window.onhashchange = onhashchange;
      onhashchange();
      modal_options = {
        backdrop: true,
        keyboard: true,
        show: false
      };
      $("#overview").modal(modal_options);
      return $("#overview-close").click(function() {
        return $("#overview").modal('hide');
      });
    });
  };

  select_item = function(item) {
    var url, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    $('fb\\:comments').remove();
    $('fb\\:like').remove();
    $(".item").removeClass("bigger");
    (function(__iced_k) {
      if (item) {
        item.addClass("bigger");
        $("#items").isotope('reLayout', function() {});
        selected_slug = item.attr("rel");
        url = generate_url(selected_slug);
        item.append("<fb:like href='" + url + "' send='true' width='590' show_faces='true' action='recommend' font='tahoma'></fb:like>");
        item.append("<fb:comments href='" + url + "' num_posts='2' width='590'></fb:comments>");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: 'gov-watch.iced',
            funcname: 'select_item'
          });
          if (window.FB) {
            FB.XFBML.parse(item.get(0), (__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return __iced_deferrals.ret = arguments[0];
                };
              })(),
              lineno: 355
            })));
          } else {
            __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return __iced_deferrals.ret = arguments[0];
                };
              })(),
              lineno: 358
            });
          }
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: 'gov-watch.iced',
              funcname: 'select_item'
            });
            setTimeout((__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return __iced_deferrals.ret = arguments[0];
                };
              })(),
              lineno: 358
            })), 1000);
            __iced_deferrals._fulfill();
          })(function() {
            $(".item[rel=" + selected_slug + "]").scrollintoview();
            $("#items").isotope('reLayout');
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: 'gov-watch.iced',
                funcname: 'select_item'
              });
              setTimeout((__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return __iced_deferrals.ret = arguments[0];
                  };
                })(),
                lineno: 361
              })), 1000);
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k($(".item[rel=" + selected_slug + "]").scrollintoview());
            });
          });
        });
      } else {
        return __iced_k();
      }
    })(function() {
      return $("#items").isotope('reLayout');
    });
  };

  do_search = function() {
    var field, found, re, rec, should_show, slug, tag, ___iced_passed_deferral, __iced_deferrals, _i, _j, _k, _len, _len2, _len3, _ref, _ref2,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    re = RegExp(search_term, "ig");
    for (_i = 0, _len = loaded_data.length; _i < _len; _i++) {
      rec = loaded_data[_i];
      slug = rec.slug;
      rec = rec.gov;
      should_show = search_term === "";
      if (search_term !== "") {
        _ref = ["recommendation", "subject", "result_metric", "title", "chapter", "subchapter", "responsible_authority"];
        for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
          field = _ref[_j];
          if (rec[field]) {
            found = rec[field].indexOf(search_term) >= 0;
          } else {
            found = false;
          }
          should_show = should_show || found;
        }
        _ref2 = rec.tags;
        for (_k = 0, _len3 = _ref2.length; _k < _len3; _k++) {
          tag = _ref2[_k];
          if (tag === search_term) should_show = true;
        }
      }
      should_show = should_show && ((selected_book === "") || (rec.book === selected_book));
      $(".item[rel=" + slug + "]").toggleClass("shown", should_show);
    }
    $("#items").isotope({
      filter: ".shown"
    });
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: 'gov-watch.iced',
        funcname: 'do_search'
      });
      setTimeout((__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return __iced_deferrals.ret = arguments[0];
          };
        })(),
        lineno: 400
      })), 1000);
      __iced_deferrals._fulfill();
    })(function() {
      return $(".item[rel=" + selected_slug + "]").scrollintoview();
    });
  };

  load_data = function() {
    return $.get("/api", data_callback, "json");
  };

  $(function() {
    try {
      loaded_data = JSON.parse(localStorage.data);
      all_books = JSON.parse(localStorage.all_books);
      all_tags = JSON.parse(localStorage.all_tags);
      all_subjects = JSON.parse(localStorage.all_subjects);
      process_data();
      return setTimeout(load_data, 10000);
    } catch (error) {
      return load_data();
    }
  });

}).call(this);
